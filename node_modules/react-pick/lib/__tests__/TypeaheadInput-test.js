"use strict";

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var TypeaheadInput = require("../TypeaheadInput");
var React = require("react/addons");

var TestUtils = React.addons.TestUtils;
var Simulate = React.addons.TestUtils.Simulate;

var expect = require("expect");
var emptyFunction = require("../helpers/emptyFunction");

var KEY_BACKSPACE = 8;

var TypeaheadInputTestWrapper = React.createClass({
  displayName: "TypeaheadInputTestWrapper",

  getDefaultProps: function getDefaultProps() {
    return {
      initialValue: "",
      onChange: emptyFunction
    };
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue
    };
  },

  handleChange: function handleChange(event) {
    this.setState({ value: event.target.value });
    this.props.onChange(event);
  },

  render: function render() {
    var _props = this.props;
    var onChange = _props.onChange;

    var otherProps = _objectWithoutProperties(_props, ["onChange"]);

    return React.createElement(TypeaheadInput, _extends({}, otherProps, {
      value: this.state.value,
      onChange: this.handleChange
    }));
  }

});

describe("TypeaheadInput", function () {

  it("shows some text, and supports typing", function () {
    var ctx = TestUtils.renderIntoDocument(React.createElement(TypeaheadInputTestWrapper, { initialValue: "hello" }));

    // Ensure that the text that we provided actually shows up in the input
    var input = TestUtils.findRenderedDOMComponentWithTag(ctx, "input");
    var inputNode = input.getDOMNode();
    expect(inputNode.value).toBe("hello");

    // Ensure that changes that we supply actually show up in the input
    Simulate.change(input, { target: { value: "hello!" } });
    Simulate.keyDown(input, { key: "!" });
    Simulate.keyUp(input, { key: "!" });
    expect(inputNode.value).toBe("hello!");
  });

  it("shows typeahead text when typing forward", function () {
    var ctx = TestUtils.renderIntoDocument(React.createElement(TypeaheadInputTestWrapper, { typeaheadValue: "California" }));

    // Ensure that there's no typehead
    var input = TestUtils.findRenderedDOMComponentWithTag(ctx, "input");
    var inputNode = input.getDOMNode();
    expect(inputNode.value).toBe("");

    // Ensure that the typeahead shows up case-insensitively and is selected
    Simulate.change(input, { target: { value: "c" } });
    Simulate.keyDown(input, { key: "c" });
    Simulate.keyUp(input, { key: "c" });
    expect(inputNode.value).toBe("california");
  });

  it("omits the typehead if the completion text does not match", function () {
    var ctx = TestUtils.renderIntoDocument(React.createElement(TypeaheadInputTestWrapper, {
      typeaheadValue: "California",
      initialValue: "h"
    }));

    // Ensure that there's no typehead
    var input = TestUtils.findRenderedDOMComponentWithTag(ctx, "input");
    var inputNode = input.getDOMNode();
    expect(inputNode.value).toBe("h");

    // Ensure that there's still no typeahead
    Simulate.change(input, { target: { value: "hi" } });
    Simulate.keyDown(input, { key: "i" });
    Simulate.keyUp(input, { key: "i" });
    expect(inputNode.value).toBe("hi");
  });
});