"use strict";

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListOption = require("./ListOption");
var React = require("react/addons");

var PureRenderMixin = React.addons.PureRenderMixin;

var joinClasses = require("react/lib/joinClasses");

/**
 * <List> is a component that renders the list that Combobox displays.
 */
var List = React.createClass({
  displayName: "List",

  mixins: [PureRenderMixin],

  propTypes: {
    /**
     * Function that given an `index` of an option, returns an ID that should
     * be unique across the document, but deterministic--multiple calls of this
     * function with the same `index` should return the same ID.
     *
     * Useful for assigning `aria-activedescendant` in a parent component.
     */
    getDescendantIdForOption: React.PropTypes.func.isRequired,

    /**
     * Function that takes an `option` value, and returns a string label.
     */
    getLabelForOption: React.PropTypes.func.isRequired,

    /**
     * Event handler called if the user does an action to change `optionIndex`.
     * The function called receives the value of `optionIndex` to change to.
     */
    onChange: React.PropTypes.func.isRequired,

    /**
     * Event handler called if the user does an action to complete a given 
     * option into the parent <Combobox> as the value. The function called 
     * receives the value of `optionIndex` to complete.
     */
    onComplete: React.PropTypes.func.isRequired,

    /**
     * The React component to use render for each option of the list popup. 
     * The component must support rendering passed properties and `className`, 
     * and will receive the `option` and `getLabelForOption` to help with 
     * rendering.
     */
    optionComponent: React.PropTypes.func,

    /**
     * The currently focused index of the list view.
     */
    optionIndex: React.PropTypes.number,

    /**
     * The different option values that the user is selecting between.
     */
    options: React.PropTypes.array
  },

  getDefaultProps: function getDefaultProps() {
    return {
      optionComponent: ListOption,
      optionIndex: null,
      options: []
    };
  },

  handleOptionMouseEnter: function handleOptionMouseEnter(idx, event) {
    this.props.onChange(idx);
  },

  handleOptionClick: function handleOptionClick(idx, event) {
    this.props.onComplete(idx);
  },

  render: function render() {
    var _this = this;

    var OptionComponent = this.props.optionComponent;
    var _props = this.props;
    var className = _props.className;
    var optionIndex = _props.optionIndex;
    var options = _props.options;
    var getLabelForOption = _props.getLabelForOption;
    var getDescendantIdForOption = _props.getDescendantIdForOption;

    var otherProps = _objectWithoutProperties(_props, ["className", "optionIndex", "options", "getLabelForOption", "getDescendantIdForOption"]);

    return React.createElement(
      "ul",
      _extends({}, otherProps, {
        className: joinClasses("List", className),
        role: "listbox" }),
      options.map(function (option, idx) {
        return React.createElement(OptionComponent, {
          className: joinClasses("List-option", idx === optionIndex && "List-option--isFocused"),
          id: getDescendantIdForOption(idx),
          getLabelForOption: getLabelForOption,
          key: idx,
          onClick: _this.handleOptionClick.bind(_this, idx),
          onMouseEnter: _this.handleOptionMouseEnter.bind(_this, idx),
          option: option,
          role: "listitem"
        });
      })
    );
  }

});

module.exports = List;