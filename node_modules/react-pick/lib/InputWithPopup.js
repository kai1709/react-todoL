"use strict";

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ComponentPropType = require("./helpers/ComponentPropType");
var React = require("react/addons");

var PureRenderMixin = React.addons.PureRenderMixin;

var joinClasses = require("react/lib/joinClasses");
var getUniqueId = require("./helpers/getUniqueId");

/**
 * <InputWithPopup> enables us to render an <input> (or other component with
 * similar contract) with an attached popup flyout.
 *
 * To use it, pass the values that you would normally pass to an <input> to
 * the <InputWithPopup>, and then toggle the
 */
var InputWithPopup = React.createClass({
  displayName: "InputWithPopup",

  mixins: [PureRenderMixin],

  propTypes: {
    /**
     * Boolean value that's true when the popup should be open.
     * Default is false.
     */
    isOpen: React.PropTypes.bool,

    /**
     * The component to render as the input element.
     * Default is <input>.
     */
    inputComponent: ComponentPropType,

    /**
     * The component to render as the wrapper around the popup.
     * Default is <div>
     */
    popupComponent: ComponentPropType
  },

  getDefaultProps: function getDefaultProps() {
    return {
      isOpen: false,
      inputComponent: "input",
      popupComponent: "div"
    };
  },

  getInitialState: function getInitialState() {
    return {
      id: getUniqueId("InputWithPopup")
    };
  },

  render: function render() {
    var InputComponent = this.props.inputComponent;
    var PopupComponent = this.props.popupComponent;
    var _props = this.props;
    var className = _props.className;
    var children = _props.children;
    var isOpen = _props.isOpen;

    var otherProps = _objectWithoutProperties(_props, ["className", "children", "isOpen"]);

    return React.createElement(
      "div",
      { className: "InputWithPopup" },
      React.createElement(InputComponent, _extends({}, otherProps, {
        "aria-haspopup": "false",
        "aria-owns": this.state.id,
        "aria-expanded": isOpen + "",
        className: joinClasses("InputWithPopup-input", className)
      })),
      React.createElement(
        PopupComponent,
        {
          id: this.state.id,
          className: joinClasses("InputWithPopup-popup", isOpen && "InputWithPopup-popup--isOpen") },
        children
      )
    );
  }

});

module.exports = InputWithPopup;
