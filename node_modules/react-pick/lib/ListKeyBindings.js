"use strict";

var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

var KEY_ARROW_DOWN = 40;
var KEY_ARROW_UP = 38;
var KEY_RETURN = 13;
var KEY_ESC = 27;

function ensureCompletionPossible(fun) {
  return function (props) {
    if (props.optionsLength > 0) {
      return fun(props);
    }
  };
}

/**
 * We use ListKeyBindings to represent the keyDown event behavior for
 * components related to the <List> component in `react-pick`.
 *
 * There's a few key properties that we expect to find in `props`:
 *
 *    - `onChange`
 *    - `onComplete`
 *    - `onCancel`
 *    - `optionIndex`
 *    - `optionsLength`
 */
var ListKeyBindings = {
  getKeyBindings: function getKeyBindings(props) {
    var _this = this;

    return (function () {
      var _ref = {};

      _defineProperty(_ref, KEY_ARROW_DOWN, _this.changeToNext);

      _defineProperty(_ref, KEY_ARROW_UP, _this.changeToPrevious);

      _defineProperty(_ref, KEY_RETURN, _this.complete);

      _defineProperty(_ref, KEY_ESC, props.onCancel);

      return _ref;
    })();
  },

  complete: ensureCompletionPossible(function (props) {
    props.onComplete(props.optionIndex);
  }),

  changeToNext: ensureCompletionPossible(function (props) {
    props.onChange(props.optionIndex === null ? 0 : Math.min(props.optionIndex + 1, props.optionsLength - 1));
  }),

  changeToPrevious: ensureCompletionPossible(function (props) {
    props.onChange(props.optionIndex === null ? props.optionsLength - 1 : Math.max(0, props.optionIndex - 1));
  }),

  handleKeyDown: function handleKeyDown(props, event) {
    var binding = this.getKeyBindings(props)[event.keyCode];

    if (binding) {
      event.preventDefault();
      binding(props);
    }
  }
};

module.exports = ListKeyBindings;